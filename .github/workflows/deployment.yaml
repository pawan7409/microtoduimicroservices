name: Deploy Microservice Application

on:
  push:
    branches: [ main , features/pawangupta ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js 16.x and install dependencies
      - name: Install Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # # Update the backend URL in the src/TodoApp.js file
      # - name: Update backend URL
      #   run: |
      #     sed -i 's|http://localhost:5000|https://new-backend-url.com|g' src/TodoApp.js

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the React app
      - name: Build the React app
        run: npm run build

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to DockerHub or any container registry
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image for the app
      - name: Build Docker image
        run: |
          docker build -t your-docker-image-name .

      # Push Docker image to DockerHub or other registry
      - name: Push Docker image
        run: |
          docker push your-docker-image-name

      # Deploy the image to your server or Kubernetes
      # If you're using a custom server, you can SSH and deploy the image
      - name: Deploy to Nginx Server (using SSH or Kubernetes)
        run: |
          # Example: SSH into your server and deploy the image
          ssh user@your-server "docker pull your-docker-image-name && docker-compose up -d"
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH
        run: |
          ssh user@your-server "docker pull your-docker-image-name && docker-compose up -d"
    








          # env:
          # - name: ENVIRONMENT
          #   value: "production"
          # - name: LOG_LEVEL
          #   value: "info"
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: uimicroservice
#   labels:
#     app: microuimicrotask
#   namespace: default
# spec:
#   replicas: 5
#   selector:
#     matchLabels:
#       app: microuimicrotask
#   strategy:
#     type: RollingUpdate
#     rollingUpdate:
#       maxSurge: 25%
#       maxUnavailable: 25%
#   template:
#     metadata:
#       labels:
#         app: microuimicrotask
#       annotations:
#         prometheus.io/scrape: "true"
#         prometheus.io/port: "80"
#     spec:
#       serviceAccountName: uimicroservice-sa
#       priorityClassName: high-priority
#       dnsConfig:
#         nameservers:
#           - 8.8.8.8
#           - 8.8.4.4
#       affinity:
#         nodeAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             nodeSelectorTerms:
#               - matchExpressions:
#                   - key: kubernetes.io/hostname
#                     operator: In
#                     values:
#                       - aks-agentpool-34244086-vmss000000
#                       - aks-userpool-23695494-vmss000000
#         podAntiAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             - labelSelector:
#                 matchExpressions:
#                   - key: app
#                     operator: In
#                     values:
#                       - microuimicrotask
#               topologyKey: "kubernetes.io/hostname"
#       containers:
#         - name: uimicroservice
#           image: nginx
#           ports:
#             - containerPort: 80
#           resources:
#             requests:
#               memory: "512Mi"
#               cpu: "500m"
#             limits:
#               memory: "1Gi"
#               cpu: "1000m"
#           livenessProbe:
#             httpGet:
#               path: /healthz
#               port: 80
#             initialDelaySeconds: 5
#             periodSeconds: 10
#           readinessProbe:
#             httpGet:
#               path: /readiness
#               port: 80
#             initialDelaySeconds: 5
#             periodSeconds: 10
#           env:
#             - name: ENVIRONMENT
#               value: "production"
#             - name: LOG_LEVEL
#               value: "info"




                       




